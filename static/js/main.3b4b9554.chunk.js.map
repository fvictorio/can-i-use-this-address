{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["contractAbi","contractAddress","generateSig","privateKey","a","wallet","Wallet","payload","utils","defaultAbiCoder","encode","payloadHash","keccak256","signMessage","arrayify","signature","sig","splitSignature","addPrivateKey","signer","contract","Contract","add","v","r","s","addMnemonic","mnemonic","vs","rs","ss","i","fromMnemonic","push","addMultiple","App","context","useWeb3Context","useState","inputAddress","setInputAddress","inputPK","setInputPK","inputMnemonic","setInputMnemonic","address","setAddress","isUnsafe","setIsUnsafe","useEffect","active","setFirstValidConnector","addInputPK","library","getSigner","addInputMnemonic","className","placeholder","value","onChange","e","currentTarget","disabled","onClick","addressToCheck","unsafeAddresses","then","style","color","fontFamily","Boolean","window","location","hostname","match","connectors","MetaMask","Connectors","InjectedConnector","supportedNetworks","ReactDOM","render","libraryName","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b4b9554.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useWeb3Context } from \"web3-react\";\nimport { Contract, Wallet, utils } from \"ethers\";\nimport \"./App.css\";\n\nconst contractAbi = [\n  \"function unsafeAddresses(address) view returns (bool)\",\n  \"function add(uint8 v, bytes32 r, bytes32 s) public\",\n  \"function addMultiple(uint8[] vs, bytes32[] rs, bytes32[] ss) public\"\n];\nconst contractAddress = \"0xa334b942d69f4d2cc6806010984dc19637ebb47f\";\n\nconst generateSig = async (privateKey: string) => {\n  const wallet = new Wallet(privateKey);\n  const payload = utils.defaultAbiCoder.encode([\"string\"], [\"This address is unsafe\"]);\n  const payloadHash = utils.keccak256(payload);\n  const signature = await wallet.signMessage(utils.arrayify(payloadHash));\n  const sig = utils.splitSignature(signature);\n  return sig;\n};\n\nconst addPrivateKey = async (privateKey: string, signer: any) => {\n  let sig = await generateSig(privateKey);\n  const contract = new Contract(contractAddress, contractAbi, signer);\n  await contract.add(sig.v, sig.r, sig.s);\n};\n\nconst addMnemonic = async (mnemonic: string, signer: any) => {\n  let vs = [],\n    rs = [],\n    ss = [];\n  for (let i = 0; i < 10; i++) {\n    const privateKey = Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/${i}`).privateKey;\n    const sig = await generateSig(privateKey);\n    vs.push(sig.v);\n    rs.push(sig.r);\n    ss.push(sig.s);\n  }\n  const contract = new Contract(contractAddress, contractAbi, signer);\n  await contract.addMultiple(vs, rs, ss);\n};\n\nfunction App() {\n  const context = useWeb3Context();\n  const [inputAddress, setInputAddress] = useState(\"\");\n  const [inputPK, setInputPK] = useState(\"\");\n  const [inputMnemonic, setInputMnemonic] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUnsafe, setIsUnsafe] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    if (!context.active) {\n      context.setFirstValidConnector([\"MetaMask\"]);\n    }\n  }, [context]);\n\n  const check = (addressToCheck: string) => {\n    setAddress(addressToCheck);\n    setInputAddress(\"\");\n    const contract = new Contract(contractAddress, contractAbi, context.library);\n\n    contract.unsafeAddresses(addressToCheck).then(setIsUnsafe);\n  };\n\n  const addInputPK = async (privateKey: string) => {\n    await addPrivateKey(privateKey, await context.library.getSigner());\n    setInputPK(\"\");\n  };\n\n  const addInputMnemonic = async (mnemonic: string) => {\n    await addMnemonic(mnemonic, await context.library.getSigner());\n    setInputMnemonic(\"\");\n  };\n\n  if (!context.active) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <input placeholder=\"Address\" value={inputAddress} onChange={e => setInputAddress(e.currentTarget.value)} />\n      <button disabled={!inputAddress} onClick={() => check(inputAddress)}>\n        Check\n      </button>\n      {isUnsafe !== null ? (\n        <div style={{ color: isUnsafe ? \"red\" : \"green\" }}>\n          {\" \"}\n          Address {address} is {isUnsafe ? \"not safe\" : \"safe\"}\n        </div>\n      ) : (\n        <div>&nbsp;</div>\n      )}\n      <br />\n      <br />\n      <input placeholder=\"Private key\" value={inputPK} onChange={e => setInputPK(e.currentTarget.value)} />\n      <button disabled={!inputPK} onClick={() => addInputPK(inputPK)}>\n        Add private key\n      </button>\n      <br />\n      <br />\n      <input placeholder=\"Mnemonic\" value={inputMnemonic} onChange={e => setInputMnemonic(e.currentTarget.value)} />\n      <button disabled={!inputMnemonic} onClick={() => addInputMnemonic(inputMnemonic)}>\n        Add mnemonic\n      </button>\n      <br />\n      <br />\n      <p>\n        Check if some ethereum address is compromised. Examples of compromised addresses are addresses generated by{\" \"}\n        <span style={{ fontFamily: \"monospace\" }}>ganache-cli -d</span>, addresses whose private keys have been\n        committed to a public repository, or addresses generated by mnemonics that have been committed to a public\n        repository.\n      </p>\n\n      <p>\n        It goes without saying: this list is not exhaustive. An address marked as \"safe\" could still be compromised. But\n        you can be pretty sure that an address marked as not safe shouldn't be used in mainnet.\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Web3Provider, { Connectors } from 'web3-react'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst MetaMask = new Connectors.InjectedConnector({\n  supportedNetworks: [4]\n})\n\nconst connectors = { MetaMask }\n\nReactDOM.render(\n  <Web3Provider connectors={connectors} libraryName='ethers.js'>\n    <App />\n    </Web3Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}